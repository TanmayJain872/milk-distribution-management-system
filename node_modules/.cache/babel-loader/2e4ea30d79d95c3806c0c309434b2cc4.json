{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tanmay\\\\Projects\\\\milk-distribution-management-system\\\\src\\\\components\\\\MonthlyOrderedQuantityDisplayer.js\",\n    _s = $RefreshSig$();\n\n/* jshint esversion: 11 */\n\n/* This component let's user access the total volume of milk ordered by them in a particular month */\nimport React, { useEffect, useState } from 'react';\nimport { Button, InputAdornment, MenuItem, Stack, TextField } from '@mui/material';\nimport { DesktopDatePicker, LocalizationProvider } from '@mui/x-date-pickers';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport dayjs from 'dayjs';\nimport '../styles/MonthlyAmountDisplayer.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst styleOfTextFields = {\n  width: '230px',\n  borderRadius: '4px',\n  backgroundColor: 'white'\n};\n\nconst handleSubmit = (customerID, selectedMonth, setTotalQuantity, event) => {\n  event.preventDefault();\n  const listOfMonths = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n  const [month, year] = selectedMonth.split(' ');\n\n  if (month && year) {\n    let urlOfApplication = new URL(`http://localhost:3001/api/milk/orders/${customerID}/${listOfMonths.indexOf(month) + 1}/${year}`);\n    fetch(urlOfApplication).then(response => response.json()).then(data => {\n      setTotalQuantity(data);\n      displayFieldRef.current.focus();\n    }).catch(error => console.log(error));\n  } else {\n    alert('Missing Input(s)!! Please specify the Customer ID, Month and Year to know the total amount of milk ordered in that particular month.');\n  }\n};\n\nfunction MonthlyOrderedQuantityDisplayer(props) {\n  _s();\n\n  const [totalQuantityOrdered, setTotalQuantityOrdered] = useState('');\n  const [month, setMonth] = useState(dayjs(new Date()).format(\"MMMM YYYY\"));\n  const customerID = sessionStorage.getItem('userID');\n  const dairyProducts = [\"Milk\", \"Coconut Milk\", \"Soya Milk\", \"Butter Milk\", \"Yogurt\", \"Icecream\"];\n  useEffect(() => {\n    console.log('Form 2 Month = ' + month);\n  }, [month]);\n  return /*#__PURE__*/_jsxDEV(Stack, {\n    component: \"form\",\n    id: \"monthly-amount-displayer\",\n    spacing: 1.5,\n    onSubmit: event => handleSubmit(customerID, month, setTotalQuantityOrdered, event),\n    children: [/*#__PURE__*/_jsxDEV(TextField, {\n      select: true,\n      fullWidth: true,\n      variant: \"outlined\",\n      label: \"Dairy Products\",\n      size: \"large\",\n      defaultValue: \"\",\n      sx: styleOfTextFields,\n      children: dairyProducts.map(product => /*#__PURE__*/_jsxDEV(MenuItem, {\n        value: product,\n        children: product\n      }, product, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(LocalizationProvider, {\n      dateAdapter: AdapterDayjs,\n      children: /*#__PURE__*/_jsxDEV(DesktopDatePicker, {\n        disableFuture: true,\n        label: \"Select Month\",\n        variant: \"contained\",\n        views: [\"year\", \"month\"],\n        margin: \"normal\",\n        value: month,\n        onChange: month => setMonth(dayjs(month).format(\"MMMM YYYY\")),\n        renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n          sx: styleOfTextFields\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 46\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      size: \"large\",\n      type: \"submit\",\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n      style: {\n        width: '250px',\n        height: '0px',\n        color: 'gray',\n        backgroundColor: 'gray'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      fullWidth: true,\n      variant: \"outlined\",\n      label: \"Total Quantity\",\n      size: \"large\",\n      value: totalQuantityOrdered,\n      sx: styleOfTextFields,\n      InputProps: {\n        readOnly: true,\n        endAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n          children: \"Litres\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 35\n        }, this)\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n}\n\n_s(MonthlyOrderedQuantityDisplayer, \"lKKSa33MMfQyHj+e3HMieHB1Wj8=\");\n\n_c = MonthlyOrderedQuantityDisplayer;\nexport default MonthlyOrderedQuantityDisplayer;\n\nvar _c;\n\n$RefreshReg$(_c, \"MonthlyOrderedQuantityDisplayer\");","map":{"version":3,"names":["React","useEffect","useState","Button","InputAdornment","MenuItem","Stack","TextField","DesktopDatePicker","LocalizationProvider","AdapterDayjs","dayjs","styleOfTextFields","width","borderRadius","backgroundColor","handleSubmit","customerID","selectedMonth","setTotalQuantity","event","preventDefault","listOfMonths","month","year","split","urlOfApplication","URL","indexOf","fetch","then","response","json","data","displayFieldRef","current","focus","catch","error","console","log","alert","MonthlyOrderedQuantityDisplayer","props","totalQuantityOrdered","setTotalQuantityOrdered","setMonth","Date","format","sessionStorage","getItem","dairyProducts","map","product","params","height","color","readOnly","endAdornment"],"sources":["C:/Users/Tanmay/Projects/milk-distribution-management-system/src/components/MonthlyOrderedQuantityDisplayer.js"],"sourcesContent":["/* jshint esversion: 11 */\r\n\r\n/* This component let's user access the total volume of milk ordered by them in a particular month */\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Button, InputAdornment, MenuItem, Stack, TextField } from '@mui/material';\r\nimport { DesktopDatePicker, LocalizationProvider } from '@mui/x-date-pickers';\r\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\r\nimport dayjs from 'dayjs';\r\nimport '../styles/MonthlyAmountDisplayer.css';\r\n\r\n\r\nconst styleOfTextFields = {\r\n    width: '230px',\r\n    borderRadius: '4px',\r\n    backgroundColor: 'white',\r\n};\r\n\r\n\r\nconst handleSubmit = (customerID, selectedMonth, setTotalQuantity, event) => {\r\n    event.preventDefault();\r\n    const listOfMonths = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\r\n    const [month, year] = selectedMonth.split(' ');\r\n    if (month && year) {\r\n        let urlOfApplication = new URL(`http://localhost:3001/api/milk/orders/${customerID}/${listOfMonths.indexOf(month) + 1}/${year}`);\r\n        fetch(urlOfApplication)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                setTotalQuantity(data);\r\n                displayFieldRef.current.focus();\r\n            })\r\n            .catch(error => console.log(error));\r\n    }\r\n    else {\r\n        alert('Missing Input(s)!! Please specify the Customer ID, Month and Year to know the total amount of milk ordered in that particular month.');\r\n    }\r\n    \r\n};\r\n\r\n\r\nfunction MonthlyOrderedQuantityDisplayer(props) {\r\n    const [totalQuantityOrdered , setTotalQuantityOrdered] = useState('');\r\n    const [month, setMonth] = useState(dayjs(new Date()).format(\"MMMM YYYY\"));\r\n    const customerID = sessionStorage.getItem('userID');\r\n\r\n    const dairyProducts = [\r\n        \"Milk\",\r\n        \"Coconut Milk\",\r\n        \"Soya Milk\",\r\n        \"Butter Milk\",\r\n        \"Yogurt\",\r\n        \"Icecream\"\r\n    ];\r\n\r\n    useEffect(() => {\r\n        console.log('Form 2 Month = ' + month);\r\n    }, [month]);\r\n\r\n    return (\r\n        <Stack \r\n            component='form'\r\n            id='monthly-amount-displayer'\r\n            spacing={1.5}\r\n            onSubmit={event => handleSubmit(customerID, month, setTotalQuantityOrdered, event)}\r\n        >\r\n            <TextField\r\n                select\r\n                fullWidth\r\n                variant=\"outlined\"\r\n                label='Dairy Products'\r\n                size='large'\r\n                defaultValue=''\r\n                sx={styleOfTextFields}\r\n            >\r\n                {\r\n                    dairyProducts.map(product => (\r\n                        <MenuItem key={product} value={product}>\r\n                            {product}\r\n                        </MenuItem>\r\n                    ))\r\n                }\r\n            </TextField>\r\n            <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n                <DesktopDatePicker\r\n                    disableFuture\r\n                    label='Select Month'\r\n                    variant=\"contained\"\r\n                    views={[\"year\", \"month\"]}\r\n                    margin=\"normal\"\r\n                    value={month}\r\n                    onChange={month => setMonth(dayjs(month).format(\"MMMM YYYY\"))}\r\n                    renderInput={(params) => <TextField {...params} sx={styleOfTextFields} />}\r\n                />\r\n            </LocalizationProvider>\r\n            <Button \r\n                variant='contained'\r\n                size='large'\r\n                type='submit'\r\n            >\r\n                Submit\r\n            </Button>\r\n            <br />\r\n            <hr style={{ width: '250px', height: '0px', color: 'gray', backgroundColor: 'gray' }} />\r\n            <br />\r\n            <TextField \r\n                fullWidth\r\n                variant=\"outlined\"\r\n                label='Total Quantity'\r\n                size='large'\r\n                value={totalQuantityOrdered}\r\n                sx={styleOfTextFields}\r\n                InputProps={{\r\n                    readOnly: true,\r\n                    endAdornment: <InputAdornment>Litres</InputAdornment>\r\n                }}\r\n            />\r\n        </Stack>\r\n    )\r\n}\r\n\r\nexport default MonthlyOrderedQuantityDisplayer;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}